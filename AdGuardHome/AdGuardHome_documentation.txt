AdGuard Home is a network-wide software for blocking ads and tracking. After you set it up, it'll cover ALL your home devices, and you don't need any client-side software for that.

It operates as a DNS server that re-routes tracking domains to a “black hole”, thus preventing your devices from connecting to those servers. It's based on software we use for our public AdGuard DNS servers, and both share a lot of code.

    Getting Started
        Automated install (Linux/Unix/MacOS/FreeBSD/OpenBSD)
        Alternative methods
        Guides
        API
    Comparing AdGuard Home to other solutions
        How is this different from public AdGuard DNS servers?
        How does AdGuard Home compare to Pi-Hole
        How does AdGuard Home compare to traditional ad blockers
        Known limitations
    How to build from source
        Prerequisites
        Building
    Contributing
        Test unstable versions
        Reporting issues
        Help with translations
        Other
    Projects that use AdGuard Home
    Acknowledgments
    Privacy

Getting Started
Automated install (Linux/Unix/MacOS/FreeBSD/OpenBSD)

To install with curl run the following command:

curl -s -S -L https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v

To install with wget run the following command:

wget --no-verbose -O - https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v

To install with fetch run the following command:

fetch -o - https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v

The script also accepts some options:

    -c <channel> to use specified channel;
    -r to reinstall AdGuard Home;
    -u to uninstall AdGuard Home;
    -v for verbose output.

Note that options -r and -u are mutually exclusive.
Alternative methods
Manual installation

Please read the Getting Started article on our Wiki to learn how to install AdGuard Home manually, and how to configure your devices to use it.
Docker

You can use our official Docker image on Docker Hub.
Snap Store

If you're running Linux, there's a secure and easy way to install AdGuard Home: get it from the Snap Store.
Guides

See our Wiki.
API

If you want to integrate with AdGuard Home, you can use our REST API. Alternatively, you can use this python client, which is used to build the AdGuard Home Hass.io Add-on.
Comparing AdGuard Home to other solutions
How is this different from public AdGuard DNS servers?

Running your own AdGuard Home server allows you to do much more than using a public DNS server. It's a completely different level. See for yourself:

    Choose what exactly the server blocks and permits.

    Monitor your network activity.

    Add your own custom filtering rules.

    Most importantly, it's your own server, and you are the only one who's in control.

How does AdGuard Home compare to Pi-Hole

At this point, AdGuard Home has a lot in common with Pi-Hole. Both block ads and trackers using the so-called “DNS sinkholing” method and both allow customizing what's blocked.

Note

We're not going to stop here. DNS sinkholing is not a bad starting point, but this is just the beginning.

AdGuard Home provides a lot of features out-of-the-box with no need to install and configure additional software. We want it to be simple to the point when even casual users can set it up with minimal effort.

Note

Some of the listed features can be added to Pi-Hole by installing additional software or by manually using SSH terminal and reconfiguring one of the utilities Pi-Hole consists of. However, in our opinion, this cannot be legitimately counted as a Pi-Hole's feature.
Feature 	AdGuard Home 	Pi-Hole
Blocking ads and trackers 	✅ 	✅
Customizing blocklists 	✅ 	✅
Built-in DHCP server 	✅ 	✅
HTTPS for the Admin interface 	✅ 	Kind of, but you'll need to manually configure lighttpd
Encrypted DNS upstream servers (DNS-over-HTTPS, DNS-over-TLS, DNSCrypt) 	✅ 	❌ (requires additional software)
Cross-platform 	✅ 	❌ (not natively, only via Docker)
Running as a DNS-over-HTTPS or DNS-over-TLS server 	✅ 	❌ (requires additional software)
Blocking phishing and malware domains 	✅ 	❌ (requires non-default blocklists)
Parental control (blocking adult domains) 	✅ 	❌ (requires non-default blocklists)
Force Safe search on search engines 	✅ 	❌
Per-client (device) configuration 	✅ 	✅
Access settings (choose who can use AGH DNS) 	✅ 	❌
Running without root privileges 	✅ 	❌
How does AdGuard Home compare to traditional ad blockers

It depends.

DNS sinkholing is capable of blocking a big percentage of ads, but it lacks the flexibility and the power of traditional ad blockers. You can get a good impression about the difference between these methods by reading this article, which compares AdGuard for Android (a traditional ad blocker) to hosts-level ad blockers (which are almost identical to DNS-based blockers in their capabilities). This level of protection is enough for some users.

Additionally, using a DNS-based blocker can help to block ads, tracking and analytics requests on other types of devices, such as SmartTVs, smart speakers or other kinds of IoT devices (on which you can't install traditional ad blockers).
Known limitations

Here are some examples of what cannot be blocked by a DNS-level blocker:

    YouTube, Twitch ads;

    Facebook, Twitter, Instagram sponsored posts.

Essentially, any advertising that shares a domain with content cannot be blocked by a DNS-level blocker.

Is there a chance to handle this in the future? DNS will never be enough to do this. Our only option is to use a content blocking proxy like what we do in the standalone AdGuard applications. We're going to bring this feature support to AdGuard Home in the future. Unfortunately, even in this case, there still will be cases when this won't be enough or would require quite a complicated configuration.
How to build from source
Prerequisites

Run make init to prepare the development environment.

You will need this to build AdGuard Home:

    Go v1.22 or later;
    Node.js v18.18 or later;
    npm v8 or later;

Building

Open your terminal and execute these commands:

git clone https://github.com/AdguardTeam/AdGuardHome
cd AdGuardHome
make

Warning

The non-standard -j flag is currently not supported, so building with make -j 4 or setting your MAKEFLAGS to include, for example, -j 4 is likely to break the build. If you do have your MAKEFLAGS set to that, and you don't want to change it, you can override it by running make -j 1.

Check the Makefile to learn about other commands.
Building for a different platform

You can build AdGuard Home for any OS/ARCH that Go supports. In order to do this, specify GOOS and GOARCH environment variables as macros when running make.

For example:

env GOOS='linux' GOARCH='arm64' make

or:

make GOOS='linux' GOARCH='arm64'

Preparing releases

You'll need snapcraft to prepare a release build. Once installed, run the following command:

make build-release CHANNEL='...' VERSION='...'

See the build-release target documentation.
Docker image

Run make build-docker to build the Docker image locally (the one that we publish to DockerHub). Please note, that we're using Docker Buildx to build our official image.

You may need to prepare before using these builds:

    (Linux-only) Install Qemu:

    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes --credential yes

Prepare the builder:

docker buildx create --name buildx-builder --driver docker-container --use

See the build-docker target documentation.
Debugging the frontend

When you need to debug the frontend without recompiling the production version every time, for example to check how your labels would look on a form, you can run the frontend build a development environment.

    In a separate terminal, run:

    ( cd ./client/ && env NODE_ENV='development' npm run watch )

    Run your AdGuardHome binary with the --local-frontend flag, which instructs AdGuard Home to ignore the built-in frontend files and use those from the ./build/ directory.

    Now any changes you make in the ./client/ directory should be recompiled and become available on the web UI. Make sure that you disable the browser cache to make sure that you actually get the recompiled version.

Contributing

You are welcome to fork this repository, make your changes and submit a pull request. Please make sure you follow our code guidelines though.

Please note that we don't expect people to contribute to both UI and backend parts of the program simultaneously. Ideally, the backend part is implemented first, i.e. configuration, API, and the functionality itself. The UI part can be implemented later in a different pull request by a different person.
Test unstable versions

There are two update channels that you can use:

    beta: beta versions of AdGuard Home. More or less stable versions, usually released every two weeks or more often.

    edge: the newest version of AdGuard Home from the development branch. New updates are pushed to this channel daily.

There are three options how you can install an unstable version:

    Snap Store: look for the beta and edge channels.

    Docker Hub: look for the beta and edge tags.

    Standalone builds. Use the automated installation script or look for the available builds on the Wiki.

    Script to install a beta version:

    curl -s -S -L https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -c beta

Script to install an edge version:

curl -s -S -L https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -c edge

Report issues

If you run into any problem or have a suggestion, head to this page and click on the “New issue” button. Please follow the instructions in the issue form carefully and don't forget to start by searching for duplicates.
Help with translations

If you want to help with AdGuard Home translations, please learn more about translating AdGuard products in our Knowledge Base. You can contribute to the AdGuardHome project on CrowdIn.
Other
Another way you can contribute is by looking for issues marked as help wanted, asking if the issue is up for grabs, and sending a PR fixing the bug or implementing the feature.

Overview
What is AdGuard Home?

AdGuard Home is a network-wide software for blocking ads and tracking. Unlike Public AdGuard DNS and Private AdGuard DNS, AdGuard Home is designed to run on users’ own machines, which gives experienced users more control over their DNS traffic.

This guide should help you get started.

Getting started
Installation
Official releases

Download the archive with the binary file for your operating system from the latest stable release page. The full list of supported platforms as well as links to beta and edge (unstable) releases can be found on our platforms page.

To install AdGuard Home as a service, extract the archive, enter the AdGuardHome directory, and run:

./AdGuardHome -s install

Notes

    Users of Fedora Linux and its derivatives: install AdGuard Home in the /usr/local/bin directory. Failure to do so may cause issues with SELinux and permissions. See issue 765 and issue 3281.

    Users of macOS 10.15 Catalina and newer should place the AdGuard Home working directory inside the /Applications directory.

Docker and Snap

We also provide an official AdGuard Home docker image and an official Snap Store package for experienced users.
Other

Some other unofficial options include:

    Home Assistant add-on maintained by @frenck.

    OpenWrt LUCI app maintained by @kongfl888.

    Arch Linux, Arch Linux ARM, and other Arch-based OSs, may build via the adguardhome package in the AUR maintained by @graysky2.

    Cloudron app maintained by @gramakri.

First start

First of all, check your firewall settings. To install and use AdGuard Home, the following ports and protocols must be available:

    3000/TCP for the initial installation;
    80/TCP for the web interface;
    53/UDP for the DNS server.

You may need to open additional ports for protocols other than plain DNS, such as DNS-over-HTTPS.

DNS servers bind to port 53, which requires superuser privileges most of the time, see below. Therefore, on Unix systems, you will need to run it with sudo or doas in terminal:

sudo ./AdGuardHome

On Windows, run cmd.exe or PowerShell with admin privileges and run AdGuardHome.exe from there.

When you run AdGuard Home for the first time, it starts listening on 0.0.0.0:3000 and prompts you to open it in your browser:

AdGuard Home is available at the following addresses:
go to http://127.0.0.1:3000
go to http://[::1]:3000
[…]

There you will go through the initial configuration wizard.

AdGuard Home network interface selection screen

AdGuard Home user creation screen

See our article on running AdGuard Home securely for guidance on how to select the initial configuration that fits you best.
Running as a service

The next step would be to register AdGuard Home as a system service (aka daemon). To install AdGuard Home as a service, run:

sudo ./AdGuardHome -s install

On Windows, run cmd.exe with admin privileges and run AdGuardHome.exe -s install to register a Windows service.

Here are the other commands you might need to control the service:

    AdGuardHome -s uninstall: Uninstall the AdGuard Home service.
    AdGuardHome -s start: Start the service.
    AdGuardHome -s stop: Stop the service.
    AdGuardHome -s restart: Restart the service.
    AdGuardHome -s status: Show the current service status.

Logs

By default, the logs are written to stderr when you run AdGuard Home in a terminal. If you run it as a service, the log output depends on the platform:

    On macOS, the log is written to /var/log/AdGuardHome.*.log files.

    On other Unixes, the log is written to syslog or journald.

    On Windows, the log is written to the Windows event log.

You can change this behavior in the AdGuard Home configuration file.
Updating

An example of an update notification

When a new version is released, AdGuard Home’s UI shows a notification message and the Update now button. Click this button, and AdGuard Home will be automatically updated to the latest version. Your current AdGuard Home executable file is saved inside the backup directory along with the current configuration file, so you can revert the changes, if necessary.
Manual update

In case the button isn’t shown or an automatic update has failed, you can update manually. We have a detailed guide on manual updates, but in short:

    Download the new AdGuard Home package.

    Extract it to a temporary directory.

    Replace the old AdGuard Home executable file with the new one.

    Restart AdGuard Home.

Docker, Home Assistant, and Snapcraft updates

Auto-updates for Docker, Hass.io/Home Assistant, and Snapcraft installations are disabled. Update the image instead.
Command-line update

To update AdGuard Home package without the need to use Web API run:

./AdGuardHome --update

Configuring devices
Router

This setup will automatically cover all devices connected to your home router, and you won’t need to configure each of them manually.

    Open the preferences for your router. Usually, you can access it from your browser via a URL, such as http://192.168.0.1/ or http://192.168.1.1/. You may be prompted to enter a password. If you don’t remember it, you can often reset the password by pressing a button on the router itself, but be aware that if this procedure is chosen, you will probably lose the entire router configuration. If your router requires an app to set it up, please install the app on your phone or PC and use it to access the router’s settings.

    Find the DHCP/DNS settings. Look for the DNS letters next to a field that allows two or three sets of numbers, each divided into four groups of one to three digits.

    Enter your AdGuard Home server addresses there.

    On some router types, a custom DNS server cannot be set up. In that case, setting up AdGuard Home as a DHCP server may help. Otherwise, you should consult your router manual to learn how to customize DNS servers on your specific router model.

Windows

    Open Control Panel from the Start menu or Windows search.

    Go to Network and Internet and then to Network and Sharing Center.

    On the left side of the screen, find the Change adapter settings button and click it.

    Select your active connection, right-click it and choose Properties.

    Find Internet Protocol Version 4 (TCP/IPv4) (or, for IPv6, Internet Protocol Version 6 (TCP/IPv6)) in the list, select it, and then click Properties again.

    Choose Use the following DNS server addresses and enter your AdGuard Home server addresses.

macOS

    Click the Apple icon and go to System Preferences.

    Click Network.

    Select the first connection in your list and click Advanced.

    Select the DNS tab and enter your AdGuard Home server addresses.

Android
note

Instructions for Android devices may differ depending on the OS version and the manufacturer.

    From the Android menu home screen, tap Settings.

    Tap Wi-Fi on the menu. The screen with all of the available networks will be displayed (it is impossible to set custom DNS for mobile connection).

    Long press the network you’re connected to and tap Modify Network.

    On some devices, you may need to check the box for Advanced to see more settings. To adjust your Android DNS settings, you will need to change the IP settings from DHCP to Static.

    Change set DNS 1 and DNS 2 values to your AdGuard Home server addresses.

iOS

    From the home screen, tap Settings.

    Select Wi-Fi from the left menu (it is impossible to configure DNS for mobile networks).

    Tap the name of the currently active network.

    In the DNS field, enter your AdGuard Home server addresses.

Running without superuser

You can run AdGuard Home without superuser privileges, but you must either grant the binary a capability (on Linux) or instruct it to use a different port (all platforms).
Granting the necessary capabilities (Linux only)

Using this method requires the setcap utility. You may need to install it using your Linux distribution’s package manager.

To allow AdGuard Home running on Linux to listen on port 53 without superuser privileges and bind its DNS servers to a particular interface, run:

sudo setcap 'CAP_NET_BIND_SERVICE=+eip CAP_NET_RAW=+eip' ./AdGuardHome

Then run ./AdGuardHome as an unprivileged user.
Changing the DNS listen port

To configure AdGuard Home to listen on a port that does not require superuser privileges, stop AdGuard Home, open AdGuardHome.yaml in your editor, and find these lines:

dns:
    # …
    port: 53

You can change the port to anything above 1024 to avoid requiring superuser privileges.
Limitations

Some file systems don’t support the mmap(2) system call required by the statistics system. See also issue 1188.

You can resolve this issue:

    either by supplying the --work-dir DIRECTORY arguments to the AdGuardHome binary. This option will tell AGH to use another directory for all its files instead of the default ./data directory.

    or by creating symbolic links pointing to another file system that supports mmap(2) (e.g. tmpfs):

    ln -s ${YOUR_AGH_PATH}/data/stats.db /tmp/stats.db
    ln -s ${YOUR_AGH_PATH}/data/sessions.db /tmp/sessions.db

FAQ
Why doesn’t AdGuard Home block ads or threats?

Suppose that you want AdGuard Home to block somebadsite.com but for some reason it doesn’t. Let’s try to solve this problem.

Most likely, you haven’t configured your device to use AdGuard Home as the default DNS server. To check if you’re using AdGuard Home as your default DNS server:

    On Windows, open Command Prompt (Start → Run → cmd.exe). On other systems, open your Terminal application.

    Execute nslookup example.org. It will print something like this:

    Server: 192.168.0.1
    Address: 192.168.0.1#53

    Non-authoritative answer:
    Name: example.org
    Address: <IPv4>
    Name: example.org
    Address: <IPv6>

    Check if the Server IP address is the one where AdGuard Home is running. If not, you need to configure your device accordingly. See below how to do this.

    Ensure that your request to example.org appears in the AdGuard Home UI on the Query Log page. If not, you need to configure AdGuard Home to listen on the specified network interface. The easiest way to do this is to reinstall AdGuard Home with default settings.

If you are sure that your device is using AdGuard Home as its default DNS server, but the problem persists, it may be due to a misconfiguration of AdGuard Home. Please check and make sure that:

    You have enabled the Block domains using filters and hosts files setting on the Settings → General settings page.

    You have enabled the appropriate security mechanisms, such as Parental Control, on the same page.

    You have enabled the appropriate filters on the Filters → DNS blocklists page.

    You don’t have any exception rule lists that may allow the requests enabled on the Filters → DNS allowlists page.

    You don’t have any DNS rewrites that may interfere on the Filters → DNS rewrites page.

    You don’t have any custom filtering rules that may interfere on the Filters → Custom filtering rules page.

What does “Blocked by CNAME or IP” in the query log mean?

AdGuard Home checks both DNS requests and DNS responses to prevent an adblock evasion technique known as CNAME cloaking. That is, if your filtering rules contain a domain, say tracker.example, and a DNS response for some other domain name, for example blogs.example, contains this domain name among its CNAME records, that response is blocked, because it actually leads to the blocked tracking service.
Where can I view the logs?

The default location of the plain-text logs (not to be confused with the query logs) depends on the operating system and installation mode:

    OpenWrt Linux: use the logread -e AdGuardHome command.

    Linux systems with systemd and other Unix systems with SysV-style init: /var/log/AdGuardHome.err.

    macOS: /var/log/AdGuardHome.stderr.log.

    Linux systems with Snapcraft use the snap logs adguard-home command.

    FreeBSD: /var/log/daemon.log.

    OpenBSD: /var/log/daemon.

    Windows: the Windows Event Log is used.

How do I configure AdGuard Home to write verbose-level logs?

To troubleshoot a complicated issue, the verbose-level logging is sometimes required. Here’s how to enable it:

    Stop AdGuard Home:

    ./AdGuardHome -s stop

Configure AdGuard Home to write verbose-level logs:

    Open AdGuardHome.yaml in your editor.

    Set log.file to the desired path of the log file, for example /tmp/aghlog.txt. Note that the directory must exist.

    Set log.verbose to true.

Restart AdGuard Home and reproduce the issue:

./AdGuardHome -s start

    Once you’re done with the debugging, set log.verbose back to false.

How do I show a custom block page?
note

Before doing any of this, please note that modern browsers are set up to use HTTPS, so they validate the authenticity of the web server certificate. This means that using any of these will result in warning screens.

There is a number of proposed extensions that, if reasonably well supported by clients, would provide a better user experience, including the RFC 8914 Extended DNS Error codes and the DNS Access Denied Error Page RFC draft. We’ll implement them when browsers actually start to support them.
Prerequisites

To use any of these methods to display a custom block page, you’ll need an HTTP server running on some IP address and serving the page in question on all routes. Something like pixelserv-tls.
Custom block page for Parental Control and Safe Browsing filters

There is currently no way to set these parameters from the UI, so you’ll need to edit the configuration file manually:

    Stop AdGuard Home:

    ./AdGuardHome -s stop

Open AdGuardHome.yaml in your editor.

Set the dns.parental_block_host or dns.safebrowsing_block_host settings to the IP address of the server (in this example, 192.168.123.45):

# …
dns:
  # …

  # NOTE: Change to the actual IP address of your server.
  parental_block_host: 192.168.123.45
  safebrowsing_block_host: 192.168.123.45

Restart AdGuard Home:

./AdGuardHome -s start

Custom block page for other filters

    Open the web UI.

    Navigate to Settings → DNS settings.

    In the DNS server configuration section, select the Custom IP radio button in the Blocking mode selector and enter the IPv4 and IPv6 addresses of the server.

    Click Save.

How do I change dashboard interface’s address?

Stop AdGuard Home:

./AdGuardHome -s stop

Open AdGuardHome.yaml in your editor.

Set the http.address setting to a new network interface. For example:

    0.0.0.0:0 to listen on all network interfaces;
    0.0.0.0:8080 to listen on all network interfaces with port 8080;
    127.0.0.1:0 to listen on the local loopback interface only.

Restart AdGuard Home:

./AdGuardHome -s start

How do I set up AdGuard Home as default DNS server?

See the Configuring Devices section on the Getting Started page.
Are there any known limitations?

Here are some examples of what cannot be blocked by a DNS-level blocker:

    YouTube, Twitch ads.

    Facebook, X (formerly Twitter), Instagram sponsored posts.

Basically, any ad that shares a domain with content cannot be blocked by a DNS-level blocker, unless you are ready to block the content as well.
Any possibility of dealing with this in the future?

DNS will never be enough to do this. Your only option is to use a content blocking proxy like what we do in the standalone AdGuard applications. We’ll be adding support for this feature to AdGuard Home in the future. Unfortunately, even then there will still be cases where it won’t be enough or it will require quite complicated configuration.
Why do I get bind: address already in use error when trying to install on Ubuntu?

This happens because the port 53 on localhost, which is used for DNS, is already taken by another program. Ubuntu comes with a local DNS called systemd-resolved, which uses the address 127.0.0.53:53, thus preventing AdGuard Home from binding to 127.0.0.1:53. You can see this by running:

sudo lsof -i :53

The output should be similar to:

COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
systemd-r 14542 systemd-resolve 13u IPv4 86178 0t0 UDP 127.0.0.53:domain
systemd-r 14542 systemd-resolve 14u IPv4 86179 0t0 TCP 127.0.0.53:domain

To fix this, you must either disable the systemd-resolved daemon or choose a different network interface and bind your AdGuard Home to an accessible IP address on it, such as the IP address of your router inside your network. But if you do need to listen on localhost, there are several solutions.

Firstly, AdGuard Home can detect such configurations and disable systemd-resolved for you if you press the Fix button located next to the address already in use message on the installation screen.

Secondly, if that doesn’t work, follow the instructions below. Note that if you’re using AdGuard Home with docker or snap, you’ll have to do this yourself.

    Create the /etc/systemd/resolved.conf.d directory, if necessary:

    sudo mkdir -p /etc/systemd/resolved.conf.d

Deactivate DNSStubListener and update DNS server address. To do that, create a new file, /etc/systemd/resolved.conf.d/adguardhome.conf, with the following content:

[Resolve]
DNS=127.0.0.1
DNSStubListener=no

Specifying 127.0.0.1 as the DNS server address is necessary. Otherwise the nameserver will be 127.0.0.53 which won’t work without DNSStubListener.

Activate another resolv.conf file:

sudo mv /etc/resolv.conf /etc/resolv.conf.backup
sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf

Restart DNSStubListener:

sudo systemctl reload-or-restart systemd-resolved

After that, systemd-resolved shouldn’t be shown in the output of lsof, and AdGuard Home should be able to bind to 127.0.0.1:53.
How do I configure a reverse proxy server for AdGuard Home?

If you’re already running a web server and want to access the AdGuard Home dashboard UI from a URL like http://YOUR_SERVER/aghome/, you can use this configuration for your web server:
nginx

location /aghome/ {
 proxy_cookie_path / /aghome/;
 proxy_pass http://AGH_IP:AGH_PORT/;
 proxy_redirect / /aghome/;
 proxy_set_header Host $host;
}

caddy

:80/aghome/* {
 route {
 uri strip_prefix /aghome
 reverse_proxy AGH_IP:AGH_PORT
 }
}

Or, if you only want to serve AdGuard Home with automatic TLS, use a configuration similar to the example shown below:

DOMAIN {
 encode gzip zstd
 tls YOUR_EMAIL@DOMAIN
 reverse_proxy AGH_IP:AGH_PORT
}

Apache

<VirtualHost *:80>
  ProxyPass "/" "http://AGH_IP:AGH_PORT/"
  ProxyPassReverse "/" "http://AGH_IP:AGH_PORT/"
  PreserveHost On
</VirtualHost>

note

Do not use subdirectories with the Apache reverse HTTP proxy. It's a known issue (#6604) that Apache handles relative redirects differently than other web servers. This causes problems with the AdGuard Home web interface.
Disable DoH encryption on AdGuard Home

If you’re using TLS on your reverse proxy server, you don’t need to use TLS on AdGuard Home. Set allow_unencrypted_doh: true in AdGuardHome.yaml to allow AdGuard Home to respond to DoH requests without TLS encryption.
Real IP addresses of clients

You can set the parameter trusted_proxies to the IP address(es) of your HTTP proxy to make AdGuard Home consider the headers containing the real client IP address. See the configuration and encryption pages for more information.
How do I fix permission denied errors on Fedora?

Move the AdGuardHome binary to /usr/local/bin.

As root, execute the following command to change the security context of the file:

chcon -t bin_t /usr/local/bin/AdGuardHome

Add the required firewall rules in order to make it reachable through the network. For example:

firewall-cmd --new-zone=adguard --permanent
firewall-cmd --zone=adguard --add-source=192.168.0.14/24 --permanent
firewall-cmd --zone=adguard --add-port=3000/tcp --permanent
firewall-cmd --zone=adguard --add-port=53/udp --permanent
firewall-cmd --zone=adguard --add-port=80/tcp --permanent
firewall-cmd --reload

If you are still getting code=exited status=203/EXEC or similar errors from systemctl, try uninstalling AdGuard Home and installing it directly into /usr/local/bin by using the -o option of the install script:

curl -s -S -L 'https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh' | sh -s -- -o '/usr/local/bin' -v

See issue 765 and issue 3281.
How do I fix incompatible file system errors?

You should move your AdGuard Home installation or working directory to another location. See the limitations section on the Getting Started page.
What does Error: control/version.json mean?

This error message means that AdGuard Home was unable to reach AdGuard servers to check for updates and/or download them. This could mean that the servers are blocked by your ISP or are temporarily down. If the error does not resolve itself after some time, you can try performing a manual update or disabling the automatic update check by running the AdGuardHome executable with the --no-check-update command-line option.
How do I update AdGuard Home manually?

If the button isn’t displayed or an automatic update has failed, you can update manually. In the examples below, we’ll use AdGuard Home versions for Linux and Windows for AMD64 CPUs.
Unix (Linux, macOS, BSD)

Download the new AdGuard Home package from the releases page. If you want to perform this step from the command line, type:

curl -L -S -o '/tmp/AdGuardHome_linux_amd64.tar.gz' -s\
'https://static.adguard.com/adguardhome/release/AdGuardHome_linux_amd64.tar.gz'

Or, with wget:

wget -O '/tmp/AdGuardHome_linux_amd64.tar.gz'\
'https://static.adguard.com/adguardhome/release/AdGuardHome_linux_amd64.tar.gz'

Navigate to the directory where AdGuard Home is installed. On most Unix systems the default directory is /opt/AdGuardHome, but on macOS it’s /Applications/AdGuardHome.

Stop AdGuard Home:

sudo ./AdGuardHome -s stop

OpenBSD

On OpenBSD, you will probably want to use doas instead of sudo.

Backup your data. That is, your configuration file and the data directory (AdGuardHome.yaml and data/ by default). For example, to backup your data to a new directory called ~/my-agh-backup:

mkdir -p ~/my-agh-backup
cp -r ./AdGuardHome.yaml ./data ~/my-agh-backup/

Extract the AdGuard Home archive to a temporary directory. For example, if you downloaded the archive to your ~/Downloads directory and want to extract it to /tmp/:

tar -C /tmp/ -f ~/Downloads/AdGuardHome_linux_amd64.tar.gz -x -v -z

On macOS, type something like:

unzip -d /tmp/ ~/Downloads/AdGuardHome_darwin_amd64.zip

Replace the old AdGuard Home executable file with the new one. On most Unix systems the command would look something like this:

sudo cp /tmp/AdGuardHome/AdGuardHome /opt/AdGuardHome/AdGuardHome

On macOS, something like:

sudo cp /tmp/AdGuardHome/AdGuardHome /Applications/AdGuardHome/AdGuardHome

You may also want to copy the documentation parts of the package, such as the change log (CHANGELOG.md), the README file (README.md), and the license (LICENSE.txt).

You can now remove the temporary directory.

Restart AdGuard Home:

sudo ./AdGuardHome -s start

Windows (Using PowerShell)

In all examples below, the PowerShell must be run as Administrator.

    Download the new AdGuard Home package from the releases page. If you want to perform this step from the command line:

    $outFile = Join-Path -Path $Env:USERPROFILE -ChildPath 'Downloads\AdGuardHome_windows_amd64.zip'
    $aghUri = 'https://static.adguard.com/adguardhome/release/AdGuardHome_windows_amd64.zip'
    Invoke-WebRequest -OutFile "$outFile" -Uri "$aghUri"

Navigate to the directory where AdGuard Home was installed. In the examples below, we’ll use C:\Program Files\AdGuardHome.

Stop AdGuard Home:

.\AdGuardHome.exe -s stop

Backup your data. That is, your configuration file and the data directory (AdGuardHome.yaml and data/ by default). For example, to backup your data to a new directory called my-agh-backup:

$newDir = Join-Path -Path $Env:USERPROFILE -ChildPath 'my-agh-backup'
New-Item -Path $newDir -ItemType Directory
Copy-Item -Path .\AdGuardHome.yaml, .\data -Destination $newDir -Recurse

Extract the AdGuard Home archive to a temporary directory. For example, if you downloaded the archive to your Downloads directory and want to extract it to a temporary directory:

$outFile = Join-Path -Path $Env:USERPROFILE -ChildPath 'Downloads\AdGuardHome_windows_amd64.zip'
Expand-Archive -Path "$outFile" -DestinationPath $Env:TEMP

Replace the old AdGuard Home executable file with the new one. For example:

$aghExe = Join-Path -Path $Env:TEMP -ChildPath 'AdGuardHome\AdGuardHome.exe'
Copy-Item -Path "$aghExe" -Destination .\AdGuardHome.exe

You may also want to copy the documentation parts of the package, such as the change log (CHANGELOG.md), the README file (README.md), and the license (LICENSE.txt).

You can now remove the temporary directory.

Restart AdGuard Home:

.\AdGuardHome.exe -s start

How do I uninstall AdGuard Home?

Depending on how you installed AdGuard Home, there are different ways to uninstall it.
caution

Before uninstalling AdGuard Home, don’t forget to change the configuration of your devices and point them to a different DNS server.
Regular installation

In this case, do the following:

    Unregister AdGuard Home service: ./AdGuardHome -s uninstall.

    Remove the AdGuard Home directory.

Docker

Simply stop and remove the image.
Snap Store

snap remove adguard-home

Setting up AdGuard Home securely

This page contains a list of additional recommendations to help ensure the security of your AdGuard Home.
Choosing server addresses

The first time you start AdGuard Home, you will be asked which interface it should use to serve plain DNS. The most secure and convenient option depends on how you want to run AdGuard Home. You can change the address(es) later, by stopping your AdGuard Home, editing the dns.bind_hosts field in the configuration file, and restarting AdGuard Home.
note

The UI currently only allows you to select one interface, but you can actually select multiple addresses through the configuration file. We will be improving the UI in future releases.

If you intend to run AdGuard Home on your computer only, select the loopback device (also known as “localhost”). It is usually called localhost, lo, or something similar and has the address 127.0.0.1.

If you plan to run AdGuard Home on a router within a small isolated network, select the locally-served interface. The names can vary, but they usually contain the words wlan or wlp and have an address starting with 192.168.. You should probably also add the loopback address as well, if you want software on the router itself to use AdGuard Home too.

If you intend to run AdGuard Home on a publicly accessible server, you’ll probably want to select the All interfaces option. Note that this may expose your server to DDoS attacks, so please read the sections on access settings and rate limiting below.
Access settings
note

If your AdGuard Home is not accessible from the outside, you can skip this section.

At the bottom of the Settings → DNS settings page you will find the Access settings section. These settings allow you to either ban clients that are known to abuse your AdGuard Home instance or to enable the Allowlist mode. The Allowlist mode is recommended for public instances where the number of clients is known and all of the clients are able to use secure DNS.

To enable the Allowlist mode, enter ClientIDs (recommended) or IP addresses for allowed clients in the Allowed clients field.
Disabling plain DNS
note

If your AdGuard Home is not accessible from the outside, you can skip this section.

If all clients using your AdGuard Home are able to use encrypted protocols, it is a good idea to disable plain DNS or make it inaccessible from the outside.

If you want to completely disable plain DNS serving, you can do so on the Settings → Encryption settings page.

If you want to restrict plain DNS to internal use only, stop your AdGuard Home, edit the dns.bind_hosts field in the configuration file to contain only the loopback address(es), and restart AdGuard Home.
Plain-DNS ratelimiting
note

If your AdGuard Home is not accessible from the outside, you can skip this section.

The default plain-DNS ratelimit of 20 should generally be sufficient, but if you have a list of known clients, you can add them to the allowlist and set a stricter ratelimit for other clients.
OS service concerns

In order to prevent privilege escalations through binary planting, it is important that the directory where AdGuard Home is installed to has proper ownership and permissions set.

We thank Go Compile for assistance in writing this section.
Unix (FreeBSD, Linux, macOS, OpenBSD)

AdGuard Home working directory, which is by default /Applications/AdGuardHome on macOS and /opt/AdGuardHome on other Unix systems, as well as the binary itself should generally have root:root ownership and not be writeable by anyone but root. You can check this with the following command, replacing /opt/AdGuardHome with your directory and /opt/AdGuardHome/AdGuardHome with your binary:

ls -d -l /opt/AdGuardHome
ls -l /opt/AdGuardHome/AdGuardHome

A reasonably secure output should look something like this:

drwxr-xr-x 4 root root 4096 Jan 1 12:00 /opt/AdGuardHome/
-rwxr-xr-x 1 root root 29409280 Jan 1 12:00 /opt/AdGuardHome/AdGuardHome

Note the lack of write permission for anyone but root as well as root ownership. If the permissions and/or ownership are not correct, run the following commands under root:

chmod 755 /opt/AdGuardHome/ /opt/AdGuardHome/AdGuardHome
chown root:root /opt/AdGuardHome/ /opt/AdGuardHome/AdGuardHome

Windows

The principle is the same on Windows: make sure that the AdGuard Home directory, typically C:\Program Files\AdGuardHome, and the AdGuardHome.exe binary have the permissions that would only allow regular users to read and execute/list them.

In the future we plan to release Windows builds as MSI installer files that make sure that this is performed automatically.

